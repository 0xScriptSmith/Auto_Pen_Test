# autopentest.py

import os
import yaml
from colorama import init, Fore, Style

from executor import (
    run_all_web_scans,
    run_all_domain_recon,
    run_all_api_scans,
    run_all_mobile_scans,
    run_all_os_scans,
    run_all_iot_scans,
    run_httpx_analysis,
)

from ai.ai_engine import setup_ai, summarize_with_ai

init(autoreset=True)

# ── ASCII BANNER ────────────────────────────────────────────
def print_ascii_banner():
    banner = [
        "    █████╗ ██╗   ██╗████████╗ ██████╗   ████████╗███████╗███████╗████████╗",
        "   ██╔══██╗██║   ██║╚══██╔══╝██╔═══██╗  ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝",
        "   ███████║██║   ██║   ██║   ██║   ██║     ██║   █████╗  ███████╗   ██║   ",
        "   ██╔══██║██║   ██║   ██║   ██║   ██║     ██║   ██╔══╝  ╚════██║   ██║   ",
        "   ██║  ██║╚██████╔╝   ██║   ╚██████╔╝     ██║   ███████╗███████║   ██║   ",
        "   ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝      ╚═╝   ╚══════╝╚══════╝   ╚═╝   ",
    ]
    border_top = "╔" + "═" * 70 + "╗"
    border_bottom = "╚" + "═" * 70 + "╝"

    print(Fore.GREEN + border_top)
    for line in banner:
        print(Fore.GREEN + "║ " + line.ljust(68) + "║")
    print(Fore.GREEN + border_bottom)
    print(Fore.GREEN + "║ AI-Integrated Automated Pentesting Framework".ljust(71) + "║")
    print(Fore.GREEN + "║ Version: 1.0 | Maintained by AutoPenTest Team".ljust(71) + "║")
    print(Fore.GREEN + border_bottom + "\n")

# ── SETUP ────────────────────────────────────────────────────
def ensure_dirs():
    os.makedirs("config", exist_ok=True)
    os.makedirs("results", exist_ok=True)

def generate_default_config():
    default_config = {
        "mode": "web",
        "output": "results/scan_results.txt",
        "openai_api_key": ""
    }
    with open("config/settings.yaml", "w") as f:
        yaml.dump(default_config, f)
    print(Fore.YELLOW + "[*] Default config/settings.yaml generated.")

def load_config():
    config_path = "config/settings.yaml"
    if not os.path.exists(config_path):
        generate_default_config()
    with open(config_path, "r") as f:
        return yaml.safe_load(f)

# ── USER INPUT ───────────────────────────────────────────────
def prompt_user():
    print(Fore.CYAN + """
Select the type of test to run:
[1] Domain
[2] Web
[3] API
[4] Mobile
[5] Operating System
[6] IoT Device
    """)
    choice = input("Enter choice [1-6]: ").strip()
    mode_map = {
        "1": "domain",
        "2": "web",
        "3": "api",
        "4": "mobile",
        "5": "os",
        "6": "iot"
    }
    mode = mode_map.get(choice)
    if not mode:
        print(Fore.RED + "[!] Invalid choice.")
        exit(1)

    target = input("Enter the target (domain/IP/URL/etc.): ").strip()
    return mode, target

# ── MAIN EXECUTION ───────────────────────────────────────────
def main():
    print_ascii_banner()
    ensure_dirs()
    config = load_config()

    mode, target = prompt_user()
    output_file = config.get("output", "results/scan_results.txt")
    ai_key = config.get("openai_api_key", "")

    use_ai = input("Do you want to use AI summarization? (y/n): ").strip().lower() == "y"
    if use_ai and ai_key:
        try:
            setup_ai(ai_key)
        except Exception as e:
            print(Fore.RED + f"[!] Failed to setup AI: {e}")
            use_ai = False

    print(Fore.YELLOW + f"\n[+] Starting {mode.upper()} scan on {target}\n")

    results = {}
    if mode == "web":
        results = run_all_web_scans(target)
    elif mode == "domain":
        results = run_all_domain_recon(target)
    elif mode == "api":
        results = run_all_api_scans(target)
    elif mode == "mobile":
        results = run_all_mobile_scans(target)
    elif mode == "os":
        results = run_all_os_scans(target)
    elif mode == "iot":
        results = run_all_iot_scans(target)
    elif mode == "httpx":
        results = {"httpx": run_httpx_analysis(target)}
    else:
        print(Fore.RED + f"[!] Unknown module '{mode}'.")
        return

    full_output = "\n\n".join([f"== {k.upper()} ==\n{v}" for k, v in results.items()])
    with open(output_file, "w") as f:
        f.write(full_output)

    print(Fore.GREEN + f"[+] Scan completed. Results saved to {output_file}")

    if use_ai and ai_key:
        print(Fore.YELLOW + "[*] Generating AI summary...")
        try:
            summary = summarize_with_ai(full_output)
            with open(output_file.replace(".txt", "_summary.txt"), "w") as f:
                f.write(summary)
            print(Fore.GREEN + "[+] Summary saved.")
        except Exception as e:
            print(Fore.RED + f"[!] AI summarization failed: {e}")

if __name__ == "__main__":
    main()
